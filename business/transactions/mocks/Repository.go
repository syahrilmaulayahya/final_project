// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	transactions "final_project/business/transactions"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, domain
func (_m *Repository) Add(ctx context.Context, domain transactions.Shopping_CartDomain) (transactions.Shopping_CartDomain, error) {
	ret := _m.Called(ctx, domain)

	var r0 transactions.Shopping_CartDomain
	if rf, ok := ret.Get(0).(func(context.Context, transactions.Shopping_CartDomain) transactions.Shopping_CartDomain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(transactions.Shopping_CartDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, transactions.Shopping_CartDomain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPM provides a mock function with given fields: ctx, domain
func (_m *Repository) AddPM(ctx context.Context, domain transactions.Payment_MethodDomain) (transactions.Payment_MethodDomain, error) {
	ret := _m.Called(ctx, domain)

	var r0 transactions.Payment_MethodDomain
	if rf, ok := ret.Get(0).(func(context.Context, transactions.Payment_MethodDomain) transactions.Payment_MethodDomain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(transactions.Payment_MethodDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, transactions.Payment_MethodDomain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddShipment provides a mock function with given fields: ctx, domain
func (_m *Repository) AddShipment(ctx context.Context, domain transactions.ShipmentDomain) (transactions.ShipmentDomain, error) {
	ret := _m.Called(ctx, domain)

	var r0 transactions.ShipmentDomain
	if rf, ok := ret.Get(0).(func(context.Context, transactions.ShipmentDomain) transactions.ShipmentDomain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(transactions.ShipmentDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, transactions.ShipmentDomain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Canceled provides a mock function with given fields: ctx, userid, transid
func (_m *Repository) Canceled(ctx context.Context, userid int, transid int) (transactions.Transaction_DetailDomain, error) {
	ret := _m.Called(ctx, userid, transid)

	var r0 transactions.Transaction_DetailDomain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) transactions.Transaction_DetailDomain); ok {
		r0 = rf(ctx, userid, transid)
	} else {
		r0 = ret.Get(0).(transactions.Transaction_DetailDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userid, transid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Checkout provides a mock function with given fields: ctx, userid, shopping_cartid
func (_m *Repository) Checkout(ctx context.Context, userid int, shopping_cartid int) (transactions.TransactionDomain, error) {
	ret := _m.Called(ctx, userid, shopping_cartid)

	var r0 transactions.TransactionDomain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) transactions.TransactionDomain); ok {
		r0 = rf(ctx, userid, shopping_cartid)
	} else {
		r0 = ret.Get(0).(transactions.TransactionDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userid, shopping_cartid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChoosePnS provides a mock function with given fields: ctx, domain
func (_m *Repository) ChoosePnS(ctx context.Context, domain transactions.TransactionDomain) (transactions.TransactionDomain, error) {
	ret := _m.Called(ctx, domain)

	var r0 transactions.TransactionDomain
	if rf, ok := ret.Get(0).(func(context.Context, transactions.TransactionDomain) transactions.TransactionDomain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(transactions.TransactionDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, transactions.TransactionDomain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delivered provides a mock function with given fields: ctx, userid, transid
func (_m *Repository) Delivered(ctx context.Context, userid int, transid int) (transactions.Transaction_DetailDomain, error) {
	ret := _m.Called(ctx, userid, transid)

	var r0 transactions.Transaction_DetailDomain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) transactions.Transaction_DetailDomain); ok {
		r0 = rf(ctx, userid, transid)
	} else {
		r0 = ret.Get(0).(transactions.Transaction_DetailDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userid, transid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailSC provides a mock function with given fields: ctx, id
func (_m *Repository) DetailSC(ctx context.Context, id int) ([]transactions.Shopping_CartDomain, error) {
	ret := _m.Called(ctx, id)

	var r0 []transactions.Shopping_CartDomain
	if rf, ok := ret.Get(0).(func(context.Context, int) []transactions.Shopping_CartDomain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Shopping_CartDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPM provides a mock function with given fields: ctx
func (_m *Repository) GetPM(ctx context.Context) ([]transactions.Payment_MethodDomain, error) {
	ret := _m.Called(ctx)

	var r0 []transactions.Payment_MethodDomain
	if rf, ok := ret.Get(0).(func(context.Context) []transactions.Payment_MethodDomain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Payment_MethodDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShipment provides a mock function with given fields: ctx
func (_m *Repository) GetShipment(ctx context.Context) ([]transactions.ShipmentDomain, error) {
	ret := _m.Called(ctx)

	var r0 []transactions.ShipmentDomain
	if rf, ok := ret.Get(0).(func(context.Context) []transactions.ShipmentDomain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.ShipmentDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransDetail provides a mock function with given fields: ctx, userid, transid
func (_m *Repository) GetTransDetail(ctx context.Context, userid int, transid int) (transactions.Transaction_DetailDomain, transactions.TransactionDomain, transactions.Shopping_CartDomain, error) {
	ret := _m.Called(ctx, userid, transid)

	var r0 transactions.Transaction_DetailDomain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) transactions.Transaction_DetailDomain); ok {
		r0 = rf(ctx, userid, transid)
	} else {
		r0 = ret.Get(0).(transactions.Transaction_DetailDomain)
	}

	var r1 transactions.TransactionDomain
	if rf, ok := ret.Get(1).(func(context.Context, int, int) transactions.TransactionDomain); ok {
		r1 = rf(ctx, userid, transid)
	} else {
		r1 = ret.Get(1).(transactions.TransactionDomain)
	}

	var r2 transactions.Shopping_CartDomain
	if rf, ok := ret.Get(2).(func(context.Context, int, int) transactions.Shopping_CartDomain); ok {
		r2 = rf(ctx, userid, transid)
	} else {
		r2 = ret.Get(2).(transactions.Shopping_CartDomain)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, int, int) error); ok {
		r3 = rf(ctx, userid, transid)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Pay provides a mock function with given fields: ctx, transactionid, amount
func (_m *Repository) Pay(ctx context.Context, transactionid int, amount float64) (transactions.TransactionDomain, error) {
	ret := _m.Called(ctx, transactionid, amount)

	var r0 transactions.TransactionDomain
	if rf, ok := ret.Get(0).(func(context.Context, int, float64) transactions.TransactionDomain); ok {
		r0 = rf(ctx, transactionid, amount)
	} else {
		r0 = ret.Get(0).(transactions.TransactionDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, float64) error); ok {
		r1 = rf(ctx, transactionid, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
