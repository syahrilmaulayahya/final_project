// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import products "final_project/business/products"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Details provides a mock function with given fields: ctx, id
func (_m *Repository) Details(ctx context.Context, id int) (products.ProductDomain, error) {
	ret := _m.Called(ctx, id)

	var r0 products.ProductDomain
	if rf, ok := ret.Get(0).(func(context.Context, int) products.ProductDomain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(products.ProductDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByType provides a mock function with given fields: ctx, typeid
func (_m *Repository) FilterByType(ctx context.Context, typeid int) ([]products.ProductDomain, error) {
	ret := _m.Called(ctx, typeid)

	var r0 []products.ProductDomain
	if rf, ok := ret.Get(0).(func(context.Context, int) []products.ProductDomain); ok {
		r0 = rf(ctx, typeid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, typeid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx
func (_m *Repository) Get(ctx context.Context) ([]products.ProductDomain, error) {
	ret := _m.Called(ctx)

	var r0 []products.ProductDomain
	if rf, ok := ret.Get(0).(func(context.Context) []products.ProductDomain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, words
func (_m *Repository) Search(ctx context.Context, words string) ([]products.ProductDomain, error) {
	ret := _m.Called(ctx, words)

	var r0 []products.ProductDomain
	if rf, ok := ret.Get(0).(func(context.Context, string) []products.ProductDomain); ok {
		r0 = rf(ctx, words)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, words)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDescription provides a mock function with given fields: ctx, domain, id
func (_m *Repository) UpdateDescription(ctx context.Context, domain products.Product_descriptionDomain, id int) (products.Product_descriptionDomain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 products.Product_descriptionDomain
	if rf, ok := ret.Get(0).(func(context.Context, products.Product_descriptionDomain, int) products.Product_descriptionDomain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(products.Product_descriptionDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Product_descriptionDomain, int) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, domain, id
func (_m *Repository) UpdateProduct(ctx context.Context, domain products.ProductDomain, id int) (products.ProductDomain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 products.ProductDomain
	if rf, ok := ret.Get(0).(func(context.Context, products.ProductDomain, int) products.ProductDomain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(products.ProductDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.ProductDomain, int) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSize provides a mock function with given fields: ctx, sizedomain, id
func (_m *Repository) UpdateSize(ctx context.Context, sizedomain products.SizeDomain, id int) (products.SizeDomain, error) {
	ret := _m.Called(ctx, sizedomain, id)

	var r0 products.SizeDomain
	if rf, ok := ret.Get(0).(func(context.Context, products.SizeDomain, int) products.SizeDomain); ok {
		r0 = rf(ctx, sizedomain, id)
	} else {
		r0 = ret.Get(0).(products.SizeDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.SizeDomain, int) error); ok {
		r1 = rf(ctx, sizedomain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStock provides a mock function with given fields: ctx, stock, id
func (_m *Repository) UpdateStock(ctx context.Context, stock int, id int) (products.SizeDomain, error) {
	ret := _m.Called(ctx, stock, id)

	var r0 products.SizeDomain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) products.SizeDomain); ok {
		r0 = rf(ctx, stock, id)
	} else {
		r0 = ret.Get(0).(products.SizeDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, stock, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadDescription provides a mock function with given fields: ctx, domain
func (_m *Repository) UploadDescription(ctx context.Context, domain products.Product_descriptionDomain) (products.Product_descriptionDomain, error) {
	ret := _m.Called(ctx, domain)

	var r0 products.Product_descriptionDomain
	if rf, ok := ret.Get(0).(func(context.Context, products.Product_descriptionDomain) products.Product_descriptionDomain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(products.Product_descriptionDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Product_descriptionDomain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadProduct provides a mock function with given fields: ctx, productdomain
func (_m *Repository) UploadProduct(ctx context.Context, productdomain products.ProductDomain) (products.ProductDomain, error) {
	ret := _m.Called(ctx, productdomain)

	var r0 products.ProductDomain
	if rf, ok := ret.Get(0).(func(context.Context, products.ProductDomain) products.ProductDomain); ok {
		r0 = rf(ctx, productdomain)
	} else {
		r0 = ret.Get(0).(products.ProductDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.ProductDomain) error); ok {
		r1 = rf(ctx, productdomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadSize provides a mock function with given fields: ctx, sizedomain
func (_m *Repository) UploadSize(ctx context.Context, sizedomain products.SizeDomain) (products.SizeDomain, error) {
	ret := _m.Called(ctx, sizedomain)

	var r0 products.SizeDomain
	if rf, ok := ret.Get(0).(func(context.Context, products.SizeDomain) products.SizeDomain); ok {
		r0 = rf(ctx, sizedomain)
	} else {
		r0 = ret.Get(0).(products.SizeDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.SizeDomain) error); ok {
		r1 = rf(ctx, sizedomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadType provides a mock function with given fields: ctx, domain
func (_m *Repository) UploadType(ctx context.Context, domain products.Product_typeDomain) (products.Product_typeDomain, error) {
	ret := _m.Called(ctx, domain)

	var r0 products.Product_typeDomain
	if rf, ok := ret.Get(0).(func(context.Context, products.Product_typeDomain) products.Product_typeDomain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(products.Product_typeDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, products.Product_typeDomain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
